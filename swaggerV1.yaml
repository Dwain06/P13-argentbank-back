swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string

paths:
  /checkingaccount:
      get:
        tags:
          - Bank Account
        summary: Get all transactions of checking bank account
        description: return checking bank account
        produces:
          - application/json
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/components/checkingAccount'
          '401':
            description: Unothorized, login expired
          '500':
            description: Internal Server Error
            
  /transaction/{transactionId}:
      get:
        tags:
            - Transactions
        summary: Find transaction by ID
        description: Returns a single transaction
        operationId: getTransactionById
        parameters:
          - name: transactionId
            in: path
            description: ID of transaction to return
            required: true
            type: integer
            format: int64
        produces:
          - application/json
        responses:
          '200':
            description: successful operation
            schema:
              $ref: '#/components/transactionId'
          '400':
            description: Invalid ID supplied
          '504':
            description: Transaction not found
  
  /transaction/{transactionId}/notes:
      post:
        tags:
            - Notes of a transaction
        summary: Add notes to a specific transaction
        description: Add notes
        operationId: postTransactionById
        parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Notes of the transaction
          required: true
          schema:
            $ref: '#/components/transactionNotes'
        produces:
          - application/json
        responses:
          '200':
            description: Note successfuly created
          '400':
            description: Invalid ID supplied
          '504':
            description: Transaction not found
            
      put:
        tags:
            - Notes of a transaction
        summary: Modify notes to a specific transaction
        description: Modify notes
        operationId: putTransactionById
        parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Notes of the transaction
          required: true
          schema:
            $ref: '#/components/transactionNotes'
        produces:
          - application/json
        responses:
          '200':
            description: Note successfuly updated
          '400':
            description: Invalid ID supplied
          '504':
            description: Transaction not found
            
      delete:
        tags:
            - Notes of a transaction
        summary: Delete notes to a specific transaction
        description: Delete notes
        operationId: deleteTransactionById
        parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          type: integer
          format: int64
        produces:
          - application/json
        responses:
          '200':
            description: Note successfuly deleted
          '400':
            description: Invalid ID supplied
          '504':
            description: Transaction not found
  
components:
  checkingAccount:
    type: array
    items:
      properties:
        id:
          type: integer
        date:
          type: integer
        description:
          type: string
        amount:
          type: integer
    example:
    - id: 123456
      date: 123022
      description: "Golden sun bakery"
      amount: 5
    - id: 456789
      date: 123022
      description: "Golden sun bakery"
      amount: 40
      
  transactionId:
    type: object
    properties:
      id:
        type: integer
      transaction-type:
        type: string
      category:
        type: string
    example:
      id: 123456
      transaction-type: "Electronic"
      category: "Food"
      
  transactionNotes:
    type: object
    properties:
      notes:
        type: string
    example:
      notes: "Birthday present"